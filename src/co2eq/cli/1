#!/usr/bin/python
import sys
sys.path.insert(0, './../../')


import json
import argparse
import os
import pathlib
import co2eq.conf
import co2eq.flight_utils

#  select_flight( args.origin, args.destination, departure_date=None, \
#                    return_date='0001-01-01', adults=1, cabin="ECONOMY")


def get_flight( origin, destination, conf=co2eq.conf.Conf().CONF,\
                departure_date=None, return_date='0001-01-01', \
                adults=1, cabin="ECONOMY" ):
  """ return a flight from origin to destination

  The function tries with default values provided by FlightDB and in case no
  offer is provided performs another lookup with different dates.
  In our cases, the dates are 5 days latter.
  """
  airportDB = AirportDB()
  cityDB = CityDB( conf, airportDB=airportDB )
  goclimateDB = GoClimateDB( conf )
  flightDB = co2eq.flight_utils.FlightDB( conf, cityDB=cityDB, airportDB=airportDB, goclimateDB=goclimateDB)
  try:
    flight = flightDB.select_flight( origin, destination )
  except ( ValueError ) :
    ## retry with other dates - in this case 5 days later
    ## if no specific dates were specified
    if departure_date is None and return_date in [ None, '0001-01-01' ] :
      departure_date = flightDB.departure_date
      return_date = flightDB.return_date
      alt_departure = datetime.strptime( departure_date + 'T16:41:24+0200', "%Y-%m-%dT%H:%M:%S%z")
      alt_departure = ( alt_departure + timedelta( days=5 ) ).isoformat()
      alt_return = datetime.strptime( return_date + 'T16:41:24+0200', "%Y-%m-%dT%H:%M:%S%z")
      alt_return = ( alt_return + timedelta( days=5 ) ).isoformat()
      flight = flightDB.select_flight( origin, destination, departure_date=alt_departure, return_date=alt_return )
  return flight

def cli():
  description = """ Retrieves Air Flight between IATA cities """
  parser = argparse.ArgumentParser( description=description )
  parser.add_argument('origin', type=ascii,\
    help="Flight origin (IATA code)" )
  parser.add_argument('destination', type=ascii,\
    help="Flight destination (IATA code)" )
  parser.add_argument('-e', '--env', type=pathlib.Path, help="configuration file" )
  parser.add_argument('-d', '--departure_date', type=ascii, default=None, const=None,\
    action='store_const', help="Departure date YYYY-MM-DD" )
  parser.add_argument('-r', '--return_date', type=ascii,\
    action='store_const', default='0001-01-01', const='0001-01-01',\
    help="""Return date YYYY-MM-DD. The special value '0001-01-01' 
      indicates a return but no specific date. For a single flight
      the return_date needs to be set to 'single'.""" )
  parser.add_argument('-a', '--adults', type=int, action='store_const',\
    default=1, const=1, help="Number of adults" )
  parser.add_argument('-c', '--cabin', type=ascii, action='store_const',\
    default='ECONOMY', const='ECONOMY', help="Cabin class can be ECONOMY, BUSINESS, FIRST" )

  args = parser.parse_args()
  print( f"args: {args}" )
 
  if os.path.isfile( args.env ) is False:
    print( f"Unable to locate {args.env}")
  conf = co2eq.conf.Conf( env_file=args.env ).CONF 
#  select_flight( args.origin, args.destination, departure_date=None, \
#                    return_date='0001-01-01', adults=1, cabin="ECONOMY")

    

#### For a single query, the simplest way to request a flight
##origin = 'PAR'      # IATA city code
##destination = 'LAX' # IATA airport code
##
##print( "get_flight: The simplest reliable way to retrieve a flight!" )
##print( "  get_flight is simple and handle a number of errors" )
##print( "  transparently - such as bad date, Amadeus not responding,...." )
##print( f"The resulting round trip from {origin} to {destination}:" )
##flight = get_flight( origin, destination )
##print( json.dumps( flight, indent=2  ) )
##
##print("\n\n")
##print( "FlightDB.select_flight: a simple way to retrieve a flight!" )
##print( "  The basic function, that enables finer search, but may also" )
##print( "  require to handle erros manually" )
##print( f"The resulting round trip from {origin} to {destination}:" )
##flightDB = FlightDB()
##flight = flightDB.select_flight( origin, destination )
##print( json.dumps( flight, indent=2  ) )

